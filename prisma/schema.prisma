generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  email                String       @unique
  password             String?
  name                 String?
  googleId             String?
  profileUrl           String?
  isVerified           Boolean      @default(false)
  agreeToTerms         Boolean      @default(false)
  agreeToPrivacyPolicy Boolean      @default(false)
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  lastLogin            DateTime?
  roles                UserRole[]   @default([USER])
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  courses              Course[]     @relation("CourseInstructor")
  reviews              Review[]
  enrollments          Enrollment[]
  otps                 Otp[]
}

model Course {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  briefDescription String?
  thumbnailFile    String?
  thumbnail        String?
  thumbnailId      String?
  categoryId       String       @db.ObjectId
  category         Category     @relation(fields: [categoryId], references: [id])
  price            Float
  OriginalPrice    Float
  level            CourseLevel
  published        Boolean      @default(false)
  requirements     String[]
  objectives       String[]
  language         String
  instructorId     String       @db.ObjectId
  instructor       User         @relation("CourseInstructor", fields: [instructorId], references: [id])
  reviews          Review[]
  enrollments      Enrollment[]
  duration         Int          @default(0)
  sections         Section[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Section {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId    String   @db.ObjectId
  course      Course   @relation(fields: [courseId], references: [id])
  title       String
  description String?
  duration    Int?     @default(0)
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lessons     Lesson[]
}

model Lesson {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  sectionId   String   @db.ObjectId
  title       String
  description String?
  videoUrl    String?
  videoId     String?
  duration    Int      @default(0)
  order       Int
  fileName    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  section     Section  @relation(fields: [sectionId], references: [id])
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int?
  reviewId  String   @unique @db.ObjectId
  review    Review   @relation(fields: [reviewId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  courseId  String   @db.ObjectId
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  rating    Rating?
}

model Enrollment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  courseId  String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  courses Course[]
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum UserRole {
  USER
  ADMIN
  INSTRUCTOR
}
