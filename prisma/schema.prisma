generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  email                String       @unique
  password             String?
  name                 String?
  googleId             String?
  profileUrl           String?
  isVerified           Boolean      @default(false)
  agreeToTerms         Boolean      @default(false)
  agreeToPrivacyPolicy Boolean      @default(false)
  verificationCode     String?
  verificationExpires  DateTime?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  lastLogin            DateTime?
  roles                UserRole[]   @default([USER])
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  courses              Course[]     @relation("CourseInstructor")
  reviews              Review[]
  ratings              Rating[]
  enrollments          Enrollment[]
}

model Course {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  thumbnail     String?
  categoryId    String       @db.ObjectId
  category      Category     @relation(fields: [categoryId], references: [id])
  price         Float
  OriginalPrice Float
  level         CourseLevel
  published     Boolean      @default(false)
  instructorId  String       @db.ObjectId
  instructor    User         @relation("CourseInstructor", fields: [instructorId], references: [id])
  reviews       Review[]
  ratings       Rating[]
  enrollments   Enrollment[]
  duration      Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  courseId  String   @db.ObjectId
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  courseId  String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
}

model Enrollment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  courseId  String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  courses Course[]
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum UserRole {
  USER
  ADMIN
  INSTRUCTOR
}
